===================================================================================
B√ÅO C√ÅO KI·ªÇM TH·ª¨ C2 (BRANCH COVERAGE) - CALCULATETOTALPRICE FUNCTION
===================================================================================
Ng√†y th·ª±c hi·ªán: October 10, 2025
C√¥ng c·ª•: Jest v29.7.0 v·ªõi Istanbul Code Coverage
M·ª•c ti√™u: ƒê·∫°t 100% Branch Coverage (C2) cho h√†m calculateTotalPrice

===================================================================================
K·∫æT QU·∫¢ KI·ªÇM TH·ª¨
===================================================================================

‚úì T·ªïng s·ªë test cases: 14
‚úì Test cases passed: 14
‚úì Test cases failed: 0
‚úì Th·ªùi gian th·ª±c thi: ~0.641s

===================================================================================
ƒê·ªò PH·ª¶ CODE COVERAGE (C2 - BRANCH COVERAGE)
===================================================================================

Metric          | Coverage | Passed/Total
----------------|----------|-------------
Statements      | 100%     | 12/12
Branches        | 100%     | 8/8        ‚Üê ƒê·∫†T Y√äU C·∫¶U C2
Functions       | 100%     | 1/1
Lines           | 100%     | 12/12

===================================================================================
PH√ÇN T√çCH C√ÅC ƒêI·ªÇM QUY·∫æT ƒê·ªäNH (DECISION POINTS)
===================================================================================

[ƒêI·ªÇM QUY·∫æT ƒê·ªäNH 1] - Ki·ªÉm tra Input h·ª£p l·ªá
-----------------------------------------------------------
ƒêi·ªÅu ki·ªán: unitPrice <= 0 || quantity <= 0
M√¥ t·∫£: Ki·ªÉm tra input h·ª£p l·ªá

Nh√°nh TRUE (T): Input kh√¥ng h·ª£p l·ªá ‚Üí return error
  ‚úì Test case 1: unitPrice = 0, quantity = 10
  ‚úì Test case 2: unitPrice = 100, quantity = 0  
  ‚úì Test case 3: unitPrice = -10, quantity = -5

Nh√°nh FALSE (F): Input h·ª£p l·ªá ‚Üí ti·∫øp t·ª•c x·ª≠ l√Ω
  ‚úì Test case 4: unitPrice = 100, quantity = 3


[ƒêI·ªÇM QUY·∫æT ƒê·ªäNH 2] - Ki·ªÉm tra gi·∫£m gi√° 20%
-----------------------------------------------------------
ƒêi·ªÅu ki·ªán: quantity >= 10
M√¥ t·∫£: Ki·ªÉm tra ƒëi·ªÅu ki·ªán gi·∫£m gi√° 20%

Nh√°nh TRUE (T): quantity >= 10 ‚Üí √°p d·ª•ng 20% discount
  ‚úì Test case 5: quantity = 10 (bi√™n gi·ªõi)
  ‚úì Test case 6: quantity = 15

Nh√°nh FALSE (F): quantity < 10 ‚Üí kh√¥ng √°p d·ª•ng 20% discount
  ‚úì Test case 7: quantity = 9


[ƒêI·ªÇM QUY·∫æT ƒê·ªäNH 3] - Ki·ªÉm tra gi·∫£m gi√° 10%
-----------------------------------------------------------
ƒêi·ªÅu ki·ªán: quantity >= 5
M√¥ t·∫£: Ki·ªÉm tra ƒëi·ªÅu ki·ªán gi·∫£m gi√° 10%

Nh√°nh TRUE (T): quantity >= 5 (v√† < 10) ‚Üí √°p d·ª•ng 10% discount
  ‚úì Test case 8: quantity = 5 (bi√™n gi·ªõi)
  ‚úì Test case 9: quantity = 7

Nh√°nh FALSE (F): quantity < 5 ‚Üí kh√¥ng c√≥ discount
  ‚úì Test case 10: quantity = 4
  ‚úì Test case 11: quantity = 1

===================================================================================
T·∫§T C·∫¢ C√ÅC ƒê∆Ø·ªúNG ƒêI (PATHS) ƒê∆Ø·ª¢C KI·ªÇM TH·ª¨
===================================================================================

Path 1: Input kh√¥ng h·ª£p l·ªá
  (1) ‚Üí [TRUE] ‚Üí return FALSE

Path 2: Gi·∫£m gi√° 20%
  (1) ‚Üí [FALSE] ‚Üí (2) ‚Üí [TRUE] ‚Üí calculate ‚Üí return

Path 3: Gi·∫£m gi√° 10%
  (1) ‚Üí [FALSE] ‚Üí (2) ‚Üí [FALSE] ‚Üí (3) ‚Üí [TRUE] ‚Üí calculate ‚Üí return

Path 4: Kh√¥ng gi·∫£m gi√°
  (1) ‚Üí [FALSE] ‚Üí (2) ‚Üí [FALSE] ‚Üí (3) ‚Üí [FALSE] ‚Üí calculate ‚Üí return

===================================================================================
EDGE CASES & SPECIAL TESTS
===================================================================================

‚úì Bi√™n gi·ªõi gi·∫£m gi√° 10%: quantity = 5 ‚Üí 10% discount (PASS)
‚úì Bi√™n gi·ªõi gi·∫£m gi√° 20%: quantity = 10 ‚Üí 20% discount (PASS)
‚úì S·ªë th·∫≠p ph√¢n v·ªõi unitPrice: 19.99 ‚Üí x·ª≠ l√Ω ƒë√∫ng (PASS)
‚úì C·∫£ hai gi√° tr·ªã √¢m: unitPrice = -10, quantity = -5 ‚Üí error (PASS)

===================================================================================
K·∫æT LU·∫¨N
===================================================================================

‚úì ƒê·∫†T Y√äU C·∫¶U: 100% Branch Coverage (C2)
‚úì T·∫•t c·∫£ 8 nh√°nh c·ªßa 3 ƒëi·ªÉm quy·∫øt ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c ki·ªÉm th·ª≠
‚úì Kh√¥ng c√≥ nh√°nh n√†o b·ªã b·ªè s√≥t
‚úì C√°c tr∆∞·ªùng h·ª£p bi√™n (edge cases) ƒë√£ ƒë∆∞·ª£c test k·ªπ l∆∞·ª°ng
‚úì Code ho·∫°t ƒë·ªông ƒë√∫ng v·ªõi t·∫•t c·∫£ c√°c ƒë∆∞·ªùng ƒëi logic

===================================================================================
CHI TI·∫æT B√ÅO C√ÅO HTML
===================================================================================

B√°o c√°o HTML chi ti·∫øt ƒë∆∞·ª£c t·∫°o t·∫°i:
üìÅ coverage/index.html

M·ªü file n√†y trong tr√¨nh duy·ªát ƒë·ªÉ xem:
- M√†u s·∫Øc highlight c√°c d√≤ng code ƒë√£ ƒë∆∞·ª£c test
- Chi ti·∫øt t·ª´ng branch ƒë√£ ƒë∆∞·ª£c cover
- Bi·ªÉu ƒë·ªì tr·ª±c quan v·ªÅ coverage

===================================================================================
C√ÅC FILE ƒê∆Ø·ª¢C T·∫†O
===================================================================================

üìÑ package.json          - C·∫•u h√¨nh project v√† Jest
üìÑ index.test.js         - File ch·ª©a 14 test cases
üìÅ coverage/             - Th∆∞ m·ª•c ch·ª©a b√°o c√°o coverage
   ‚îú‚îÄ‚îÄ index.html        - B√°o c√°o HTML (interactive)
   ‚îú‚îÄ‚îÄ lcov-report/      - B√°o c√°o LCOV format
   ‚îî‚îÄ‚îÄ coverage-final.json

===================================================================================
H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG
===================================================================================

Ch·∫°y test th√¥ng th∆∞·ªùng:
  npm test

Ch·∫°y test v·ªõi coverage report:
  npm run test:coverage

Ch·∫°y test trong watch mode (auto re-run khi c√≥ thay ƒë·ªïi):
  npm run test:watch

===================================================================================
K·∫æT TH√öC B√ÅO C√ÅO
===================================================================================
